是否有了这些 IOC 注释，我们就可以完全摒除原来 XML 配置的方式呢？答案是否定的。有以下几点原因：
1. 注释配置不一定在先天上优于 XML 配置。如果 Bean 的依赖关系是固定的，（如 Service 使用了哪几个 DAO 类），这种配置信息不会在部署时发生调整，那么注释配置优于 XML 配置；反之如果这种依赖关系会在部署时发生调整，XML 配置显然又优于注释配置，因为注释是对 Java 源代码的调整，您需要重新改写源代码并重新编译才可以实施调整。
如果 Bean 不是自己编写的类（如 JdbcTemplate、SessionFactoryBean 等），注释配置将无法实施，此时 XML 配置是唯一可用的方式。

2. 注释配置往往是类级别的，而 XML 配置则可以表现得更加灵活。比如相比于 @Transaction 事务注释，使用 aop/tx 命名空间的事务配置更加灵活和简单。

所以在实现应用中，我们往往需要同时使用注释配置和 XML 配置: 
1. 对于类级别且不会发生变动的配置可以优先考虑注释配置；
2. 而对于那些第三方类以及容易发生调整的配置则应优先考虑使用 XML 配置。
3. Spring 会在具体实施 Bean 创建和 Bean 注入之前将这两种配置方式的元信息融合在一起。


Spring支持这么多的配置方式，那么这些配置方式必然有其自己独特的舞台

一、基于XML的配置主要使用场景：
1.第三方类库，如DataSource、JdbcTemplate等；
2.命名空间，如aop、context等；

二、基于注解的配置主要使用场景：
1.Bean的实现类是当前项目开发的，可直接在Java类中使用注解配置

三、基于Java类的配置主要使用场景：
1.对于实例化Bean的逻辑比较复杂，则比较适合用基于Java类配置的方式
2.在日常的开发中我们主要是使用XML配置和注解配置方式向结合的开发方式，一般不推荐使用基于Java类的配置方式。
